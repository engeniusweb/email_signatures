'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = createCode;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var container = {
  padding: '16px',
  overflow: 'auto',
  lineHeight: '1.45',
  backgroundColor: '#f7f7f7',
  borderRadius: '3px'
};

var content = '\n.content {\n  color: #333;\n}\n.content pre{\n  margin: 0;\n}\n.content .hljs-keyword {\n  color: #a71d5d;\n}\n.content .hljs-string {\n  color: #183691;\n}\n.content .hljs-class .hljs-title {\n  color: #795da3;\n}\n.content .xml .hljs-tag {\n  color: #a71d5d;\n}\n.content .xml .hljs-tag .hljs-title,\n.content .xml .hljs-tag .hljs-attribute,\n.content .xml .hljs-tag .hljs-value {\n  color: #333;\n}\n';

function createCode(React, parser) {
  var Component = React.Component;
  var PropTypes = React.PropTypes;

  var Code = (function (_Component) {
    _inherits(Code, _Component);

    function Code() {
      _classCallCheck(this, Code);

      _Component.apply(this, arguments);
    }

    Code.prototype.render = function render() {
      return React.createElement(
        'div',
        { style: _extends({}, container) },
        React.createElement(
          'style',
          null,
          content
        ),
        React.createElement('div', {
          className: 'content',
          dangerouslySetInnerHTML: { __html: parser(this.props.embed) } })
      );
    };

    return Code;
  })(Component);

  Code.propTypes = {
    embed: PropTypes.string.isRequired
  };

  return Code;
}

module.exports = exports['default'];